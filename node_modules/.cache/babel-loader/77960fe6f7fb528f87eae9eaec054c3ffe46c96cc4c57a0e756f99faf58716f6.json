{"ast":null,"code":"var _jsxFileName = \"D:\\\\bhama\\\\udemy\\\\react-Complete Guide\\\\InvestmentProject\\\\src\\\\App.js\";\nimport FormInput from \"./Components/FormInput\";\nimport Header from \"./Components/Header\";\nimport ResultTable from \"./Components/ResultTable\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const calculateHandler = investmentData => {\n    const yearlyData = [];\n    let currentSavings = investmentData[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = investmentData[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = investmentData[\"expected-return\"] / 100;\n    const duration = investmentData[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["FormInput","Header","ResultTable","React","jsxDEV","_jsxDEV","App","calculateHandler","investmentData","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","$RefreshReg$"],"sources":["D:/bhama/udemy/react-Complete Guide/InvestmentProject/src/App.js"],"sourcesContent":["import FormInput from \"./Components/FormInput\";\nimport Header from \"./Components/Header\";\nimport ResultTable from \"./Components/ResultTable\";\nimport React from \"react\";\n\nconst App = () => {\n  const calculateHandler = (investmentData) => {\n    const yearlyData = [];\n\n    let currentSavings = investmentData[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = investmentData[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = investmentData[\"expected-return\"] / 100;\n    const duration = investmentData[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <Header />\n      <FormInput onCalculate={calculateHandler} />\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      <ResultTable />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,gBAAgB,GAAIC,cAAc,IAAK;IAC3C,MAAMC,UAAU,GAAG,EAAE;IAErB,IAAIC,cAAc,GAAGF,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACxD,MAAMG,kBAAkB,GAAGH,cAAc,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAClE,MAAMI,cAAc,GAAGJ,cAAc,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC9D,MAAMK,QAAQ,GAAGL,cAAc,CAAC,UAAU,CAAC;;IAE3C;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,oBACEN,OAAA;IAAAc,QAAA,gBACEd,OAAA,CAACJ,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVlB,OAAA,CAACL,SAAS;MAACwB,WAAW,EAAEjB;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAI5ClB,OAAA,CAACH,WAAW;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV,CAAC;AAACE,EAAA,GAnCInB,GAAG;AAqCT,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}